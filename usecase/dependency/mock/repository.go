// Code generated by MockGen. DO NOT EDIT.
// Source: cadence-demo/usecase/dependency (interfaces: OrderRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "cadence-demo/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// ReadOrder mocks base method.
func (m *MockOrderRepository) ReadOrder(arg0 uuid.UUID) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrder", arg0)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOrder indicates an expected call of ReadOrder.
func (mr *MockOrderRepositoryMockRecorder) ReadOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrder", reflect.TypeOf((*MockOrderRepository)(nil).ReadOrder), arg0)
}

// SaveOrder mocks base method.
func (m *MockOrderRepository) SaveOrder(arg0 uuid.UUID, arg1 model.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveOrder", arg0, arg1)
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderRepositoryMockRecorder) SaveOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderRepository)(nil).SaveOrder), arg0, arg1)
}

// UpdateOrderState mocks base method.
func (m *MockOrderRepository) UpdateOrderState(arg0 uuid.UUID, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateOrderState", arg0, arg1)
}

// UpdateOrderState indicates an expected call of UpdateOrderState.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderState", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderState), arg0, arg1)
}
